setup() {
    uv venv
    uv pip compile requirements.in > requirements.txt
    uv pip install -r requirements.txt
    if [ ! -d "whisper.cpp" ]; then
        git clone https://github.com/ggml-org/whisper.cpp
        . .venv/bin/activate
        pushd whisper.cpp
        ./models/generate-coreml-model.sh base.en
        ./models/generate-coreml-model.sh small.en
        ./models/generate-coreml-model.sh medium.en
        cmake -B build -DWHISPER_COREML=1
        cmake --build build -j --config Release
        ./models/download-ggml-model.sh base.en
        ./models/download-ggml-model.sh small.en
        ./models/download-ggml-model.sh medium.en
        ./build/bin/whisper-cli -m models/ggml-base.en.bin -f samples/jfk.wav
        ./build/bin/whisper-cli -m models/ggml-small.en.bin -f samples/jfk.wav
        ./build/bin/whisper-cli -m models/ggml-medium.en.bin -f samples/jfk.wav
        popd
    fi
}

setuppy() {
    WHISPER_COREML=1 pip install git+https://github.com/absadiki/pywhispercpp
}

samplepy() {
    python sample.py
}

serve() {
    model=$1
    if [ -z "$model" ]; then
        model="base"
    fi
    pushd whisper.cpp
    ./build/bin/whisper-server --model models/ggml-$model.en.bin
    popd
}

serveoai() {
    .venv/bin/python server.py
}

daemon() {    
    # Ensure the log file is writable
    touch daemon.log
    chmod 666 daemon.log
    
    # Start the daemon with explicit Python path and environment
    echo "Starting daemon..." >> daemon.log
    nohup .venv/bin/python -u server.py >> daemon.log 2>&1 &
    
    # Wait a moment and check if the process started
    sleep 2
    if pgrep -f "Python.*server.py" > /dev/null; then
        echo "Daemon started successfully" >> daemon.log
    else
        echo "Failed to start daemon" >> daemon.log
        # Show the last few lines of the log
        tail -n 10 daemon.log
    fi
}

transcribe() {
    # search for a --model option
    model="base"
    for arg in "$@"; do
        if [ "$arg" = "--model" ]; then
            model="$2"
            break
        fi
    done
    filename=$2
    mkdir data
    whisper.cpp/build/bin/whisper-cli -m whisper.cpp/models/ggml-$model.en.bin -f $filename -ojf -of data/output
}

convert() {
    filename=$1
    filename_without_extension="${filename%.*}"
    ffmpeg -i $filename -vn -acodec pcm_s16le -ar 44100 -ac 2 $filename_without_extension.wav
}

setup_daemon() {
    # Get the absolute path of the current directory
    CURRENT_DIR=$(pwd)
    
    # Create the LaunchAgents directory if it doesn't exist
    mkdir -p ~/Library/LaunchAgents
    
    # Create the plist file
    cat > ~/Library/LaunchAgents/com.whisper-ane.daemon.plist << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.whisper-ane.daemon</string>
    <key>ProgramArguments</key>
    <array>
        <string>/bin/bash</string>
        <string>-c</string>
        <string>cd ${CURRENT_DIR} && ./cli daemon</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>KeepAlive</key>
    <true/>
    <key>StandardErrorPath</key>
    <string>${CURRENT_DIR}/daemon.log</string>
    <key>StandardOutPath</key>
    <string>${CURRENT_DIR}/daemon.log</string>
    <key>WorkingDirectory</key>
    <string>${CURRENT_DIR}</string>
</dict>
</plist>
EOF

    # Unload if already loaded
    launchctl unload ~/Library/LaunchAgents/com.whisper-ane.daemon.plist 2>/dev/null || true
    
    # Load the launch agent
    launchctl load ~/Library/LaunchAgents/com.whisper-ane.daemon.plist
    
    echo "Daemon setup complete. The service will start on next login."
}

remove_daemon() {
    # Unload the launch agent if it's running
    launchctl unload ~/Library/LaunchAgents/com.whisper-ane.daemon.plist 2>/dev/null || true
    
    # Remove the plist file
    rm -f ~/Library/LaunchAgents/com.whisper-ane.daemon.plist
    
    echo "Daemon removed successfully."
}

start_daemon() {
    # Check if daemon is already running
    if pgrep -f "python server.py" > /dev/null; then
        echo "Daemon is already running"
        return
    fi
    
    # Start the daemon
    daemon
    echo "Daemon started. Check daemon.log for details."
}

status_daemon() {
    echo "=== Process Status ==="
    if pgrep -f "Python.*server.py" > /dev/null; then
        echo "✓ Daemon is running"
        # Show the process details
        ps aux | grep "Python.*server.py" | grep -v grep
    else
        echo "✗ Daemon is not running"
        if [ -f daemon.log ]; then
            echo -e "\nLast 10 lines of daemon.log:"
            tail -n 10 daemon.log
        fi
    fi

    echo "\n=== Launch Agent Status ==="
    LAUNCH_STATUS=$(launchctl list | grep com.whisper-ane.daemon)
    if [ -n "$LAUNCH_STATUS" ]; then
        echo "✓ Launch Agent is loaded"
        echo "$LAUNCH_STATUS"
    else
        echo "✗ Launch Agent is not loaded"
    fi
    
    echo "\n=== Configuration Status ==="
    if [ -f ~/Library/LaunchAgents/com.whisper-ane.daemon.plist ]; then
        echo "✓ Launch Agent configuration exists at:"
        echo "  ~/Library/LaunchAgents/com.whisper-ane.daemon.plist"
    else
        echo "✗ No Launch Agent configuration found"
    fi
}

restart_daemon() {
    echo "Stopping daemon..."
    pkill -f "Python.*server.py" || true
    sleep 2
    echo "Starting daemon..."
    daemon
    echo "Daemon restarted. Check daemon.log for details."
}

case $1 in
    setup)
        setup
        ;;
    serve)
        serve $2
        ;;
    serveoai)
        serveoai
        ;;
    convert)
        convert $2
        ;;
    setuppy)
        setuppy
        ;;
    samplepy)
        samplepy
        ;;
    transcribe)
        transcribe $@
        ;;
    daemon)
        daemon
        ;;
    setup-daemon)
        setup_daemon
        ;;
    remove-daemon)
        remove_daemon
        ;;
    start-daemon)
        start_daemon
        ;;
    status-daemon)
        status_daemon
        ;;
    restart-daemon)
        restart_daemon
        ;;
    *)
        echo "Usage: $0 {setup|serve|convert|transcribe|daemon|setup-daemon|remove-daemon|start-daemon|status-daemon|restart-daemon}"
        exit 1
esac